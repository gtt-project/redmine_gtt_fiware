json = {
  "@context": url_for(controller: 'context', action: 'index', type: 'issues', only_path: false, format: :jsonld),
  "id": url_for(only_path: false, format: :jsonld, normalized: @normalized),
  "type": 'Issue',
  "subject": {
    "type": 'Property',
    "value": @issue.subject
  },
  "closedDate": {
    "type": 'Property',
    "value": nil
  },
  "isPrivate": {
    "type": 'Property',
    "value": @issue.is_private
  },
  "createdAt": {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.created_on
    }
  },
  "modifiedAt": {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.updated_on
    }
  },
}

if @issue.closed_on
  json[:closedDate] = {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.closed_on
    }
  }
end

if @issue.project
  json[:hasProject] = {
    "type": 'Relationship',
    "object": url_for(controller: 'projects', action: 'show', id: @issue.project_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

if @issue.tracker
  json[:hasTracker] = {
    "type": 'Property',
    "value": {
      "id": @issue.tracker_id,
      "name": @issue.tracker.name
    }
  }
end

if @issue.status
  json[:hasStatus] = {
    "type": 'Property',
    "value": {
      "id": @issue.status_id,
      "name": @issue.status.name,
      "is_closed": @issue.status.is_closed
    }
  }
end

if @issue.priority
  json[:hasPriority] = {
    "type": 'Property',
    "value": {
      "id": @issue.priority_id,
      "name": @issue.priority.name
    }
  }
end

if @issue.author
  json[:hasAuthor] = {
    "type": 'Relationship',
    "object": url_for(controller: 'users', action: 'show', id: @issue.author_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

# unless @issue.disabled_core_fields.include?('parent_issue_id')
#   json[:] =
# end

unless @issue.disabled_core_fields.include?('start_date')
  json[:startDate] = {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.start_date
    }
  }
end

unless @issue.disabled_core_fields.include?('due_date')
  json[:dueDate] = {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.due_date
    }
  }
end

unless @issue.disabled_core_fields.include?('estimated_hours')
  json[:estimatedHours] = {
    "type": 'Property',
    "value": @issue.estimated_hours
  }
  json[:totalEstimatedHours] = {
    "type": 'Property',
    "value": @issue.total_estimated_hours
  }
end

unless @issue.disabled_core_fields.include?('done_ratio')
  json[:doneRatio] = {
    "type": 'Property',
    "value": @issue.done_ratio
  }
end

unless @issue.disabled_core_fields.include?('description')
  json[:description] = {
    "type": 'Property',
    "value": @issue.description
  }
end

unless @issue.disabled_core_fields.include?('assigned_to_id')
  json[:hasAssignee] = {
    "type": 'Relationship',
    "object": url_for(controller: 'users', action: 'show', id: @issue.assigned_to_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

unless @issue.disabled_core_fields.include?('category_id') || (@issue.category.nil? && @issue.project.issue_categories.none?)
  json[:hasCategory] = {
    "type": 'Property',
    "value": {
      "id": @issue.category_id,
      "name": @issue.category.name
    }
  }
end

unless @issue.disabled_core_fields.include?('fixed_version_id') || (@issue.fixed_version.nil? && @issue.assignable_versions.none?)
  json[:hasVersion] = {
    "type": 'Property',
    "value": {
      "id": @issue.fixed_version_id,
      "name": @issue.fixed_version.name
    }
  }
end

# TODO: optional includes
# TODO: custom fields
# render_api_custom_values @issue.visible_custom_field_values, api

if User.current.allowed_to?(:view_time_entries, @project)
  json[:spentHours] = {
    "type": 'Property',
    "value": @issue.spent_hours
  }
  json[:totalSpentHours] = {
    "type": 'Property',
    "value": @issue.total_spent_hours
  }
end

if @issue.geom
  json[:location] = {
    "type": 'GeoProperty',
    "value": @issue.geojson['geometry']
  }
else
  json[:location] = nil
end

if ngsiv2
  # Output as NGSI-v2
  JsonldTransformer.to_ngsi_v2(
    JsonldTransformer.to_non_normalized(json)
  )
else
  if @normalized
    # Output as normalized NGSI-LD
    json
  else
    # Output as non-normalized NGSI-LD
    JsonldTransformer.to_non_normalized(json)
  end
end
