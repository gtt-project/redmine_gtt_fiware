json = {
  "@context": url_for(controller: 'context', action: 'index', type: 'issues', only_path: false, format: :jsonld),
  "id": url_for(only_path: false, format: :jsonld, normalized: @normalized),
  "type": 'Issue',
  "subject": {
    "type": 'Property',
    "value": @issue.subject
  },
  "closedDate": {
    "type": 'Property',
    "value": nil
  },
  "isPrivate": {
    "type": 'Property',
    "value": @issue.is_private
  },
  "createdAt": {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.created_on
    }
  },
  "modifiedAt": {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.updated_on
    }
  },
}

if @issue.closed_on
  json[:closedDate] = {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.closed_on
    }
  }
end

if @issue.project
  json[:hasProject] = {
    "type": 'Relationship',
    "object": url_for(controller: 'projects', action: 'show', id: @issue.project_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

if @issue.tracker
  json[:hasTracker] = {
    "type": 'Relationship',
    "object": url_for(controller: 'trackers', action: 'show', id: @issue.tracker_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

if @issue.status
  json[:hasStatus] = {
    "type": 'Relationship',
    "object": url_for(controller: 'statuses', action: 'show', id: @issue.status_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

if @issue.priority
  json[:hasPriority] = {
    "type": 'Relationship',
    "object": url_for(controller: 'priorities', action: 'show', id: @issue.priority_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

if @issue.author
  json[:hasAuthor] = {
    "type": 'Relationship',
    "object": url_for(controller: 'users', action: 'show', id: @issue.author_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

unless @issue.disabled_core_fields.include?('parent_issue_id') || @issue.parent_id.nil?
  json[:hasParent] = {
    "type": 'Relationship',
    "object": url_for(controller: 'issues', action: 'show', id: @issue.parent_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

unless @issue.disabled_core_fields.include?('start_date')
  json[:startDate] = {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.start_date
    }
  }
end

unless @issue.disabled_core_fields.include?('due_date')
  json[:dueDate] = {
    "type": 'Property',
    "value": {
      "@type": 'DateTime',
      "@value": @issue.due_date
    }
  }
end

unless @issue.disabled_core_fields.include?('estimated_hours')
  json[:estimatedHours] = {
    "type": 'Property',
    "value": @issue.estimated_hours
  }
  json[:totalEstimatedHours] = {
    "type": 'Property',
    "value": @issue.total_estimated_hours
  }
end

unless @issue.disabled_core_fields.include?('done_ratio')
  json[:doneRatio] = {
    "type": 'Property',
    "value": @issue.done_ratio
  }
end

unless @issue.disabled_core_fields.include?('description')
  json[:description] = {
    "type": 'Property',
    "value": @issue.description
  }
end

unless @issue.disabled_core_fields.include?('assigned_to_id') || @issue.assigned_to_id.nil?
  json[:hasAssignee] = {
    "type": 'Relationship',
    "object": url_for(controller: 'users', action: 'show', id: @issue.assigned_to_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

unless @issue.disabled_core_fields.include?('category_id') || (@issue.category.nil? && @issue.project.issue_categories.none?) || @issue.category.nil?
  json[:hasCategory] = {
    "type": 'Relationship',
    "object": url_for(controller: 'categories', action: 'show', id: @issue.category_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

unless @issue.disabled_core_fields.include?('fixed_version_id') || (@issue.fixed_version.nil? && @issue.assignable_versions.none?) || @issue.fixed_version.nil?
  json[:hasVersion] = {
    "type": 'Relationship',
    "object": url_for(controller: 'versions', action: 'show', id: @issue.fixed_version_id, only_path: false, format: :jsonld, normalized: @normalized)
  }
end

if User.current.allowed_to?(:view_time_entries, @project)
  json[:spentHours] = {
    "type": 'Property',
    "value": @issue.spent_hours
  }
  json[:totalSpentHours] = {
    "type": 'Property',
    "value": @issue.total_spent_hours
  }
end

if @issue.geom
  json[:location] = {
    "type": 'GeoProperty',
    "value": @issue.geojson['geometry']
  }
else
  json[:location] = nil
end

json[:allowedStatuses] = {
  "type": 'Relationship',
  "object": @issue.new_statuses_allowed_to(User.current).map { |status| url_for(controller: 'statuses', action: 'show', id: status.id, only_path: false, format: :jsonld, normalized: @normalized) }
}

json[:hasAttachments] = {
  "type": 'Relationship',
  "object": @issue.attachments.map { |attachment| url_for(controller: 'attachments', action: 'show', id: attachment.id, only_path: false, format: :jsonld, normalized: @normalized) }
}

json[:hasChildren] = {
  "type": 'Relationship',
  "object": @issue.children.map { |child| url_for(controller: 'issues', action: 'show', id: child.id, only_path: false, format: :jsonld, normalized: @normalized) }
}

json[:hasRelations] = {
  "type": 'Relationship',
  "object": @issue.relations.map { |relation| url_for(controller: 'relations', action: 'show', id: relation.id, only_path: false, format: :jsonld, normalized: @normalized) }
}

json[:hasJournals] = {
  "type": 'Relationship',
  "object": @issue.journals.map { |journal| url_for(controller: 'journals', action: 'show', id: journal.id, only_path: false, format: :jsonld, normalized: @normalized) }
}

json[:hasWatchers] = {
  "type": 'Relationship',
  "object": @issue.watcher_users.map { |user| url_for(controller: 'users', action: 'show', id: user.id, only_path: false, format: :jsonld, normalized: @normalized) }
}

# Handle custom fields
CustomFieldHelper.process_custom_fields(json, @issue.visible_custom_field_values, self, @normalized)

# Output NGSI documents
if ngsiv2
  # Output as NGSI-v2
  JsonldHelper.to_ngsi_v2(
    JsonldHelper.to_non_normalized(json)
  )
else
  if @normalized
    # Output as normalized NGSI-LD
    json
  else
    # Output as non-normalized NGSI-LD
    JsonldHelper.to_non_normalized(json)
  end
end
