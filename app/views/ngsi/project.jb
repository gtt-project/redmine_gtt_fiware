json = {
  "@context": url_for(controller: 'context', action: 'index', type: 'projects', only_path: false, format: :jsonld),
  "id": url_for(only_path: false, format: :jsonld, normalized: @normalized),
  "type": 'Project',
  "name": {
    "type": 'Property',
    "value": @project.name
  },
  "description": {
    "type": 'Property',
    "value": @project.description
  },
  "identifier": {
    "type": 'Property',
    "value": @project.identifier
  },
  "homepage": {
    "type": 'Property',
    "value": @project.homepage
  },
  "status": {
    "type": 'Property',
    "value": @project.status
  },
  "isPublic": {
    "type": 'Property',
    "value": @project.is_public
  },
  "createdAt": {
    "type": 'Property',
    "value": @project.created_on
  },
  "modifiedAt": {
    "type": 'Property',
    "value": @project.updated_on
  },
  "hasParentProject": {
    "type": "Relationship",
    "object": nil # TODO
  },
  "hasMembers": {
    "type": "Relationship",
    "object": [] # TODO
  },
}

# TODO: optional includes

if @project.geom
  json[:location] = {
    "type": 'GeoProperty',
    "value": @project.geojson['geometry']
  }
else
  json[:location] = nil
end

# Handle custom fields
CustomFieldHelper.process_custom_fields(json, @project.visible_custom_field_values, self, @normalized)

# Output NGSI documents
if ngsiv2
  # Output as NGSI-v2
  JsonldHelper.to_ngsi_v2(
    JsonldHelper.to_non_normalized(json)
  )
else
  if @normalized
    # Output as normalized NGSI-LD
    json
  else
    # Output as non-normalized NGSI-LD
    JsonldHelper.to_non_normalized(json)
  end
end
